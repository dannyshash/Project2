Use Case 1: Add a new expense		
	Description: User adds a new expense
	Actor(s): User
	Goal: User able to add 2 types of expenses
	Pre-conditions: User already logged in to the system
	Main scenario:
		1. User chooses to add a new expense
		2. User prompted to choose the expense types
		3. User enters the details for the selected expense types
		4. System validates the data 
		5. System add the expense into the list 
		6. System displays the main window with the list of existing expenses for the type just entered
	Alternative scenarios:
                         1. The information is incorrect (amount entered is negative)
                               1.1 User will receive a prompt indicating which info is incorrect
                               1.2 After correcting the info, it will be sent and stored in database
	Post-conditions: The list of all the expenses displayed on the main window for the selected time period.

Use Case 2: Modify an existing expense
	Description: User can modify an existing expense
	Actor(s): User
	Goal: user is able to modify an expense type belongs to a certain period
	Pre-conditions: User already logged in to the system.
	Main scenario: 
		1. User selects a row from the list and modifies allowed details, like paid, amount, any additional details, etc...
		2. System modifies the expense entry
		3. System refreshes the main window with existing expense list
	Alternative scenarios:
		1. User changes the expense type for the displayed period
			1.1 System fetched the expense list for the period chosen by the user
			1.2 System displays the expense list in the main window
			Same steps as in the main flow.
		2. User changes the time period for the displayed expense type
			2.1 System fetched the expense list for the period chosen by the user
			2.2 System displays the expense list in the main window
			Same steps as in the main flow.
		3. User changes the expense type and the time period
			3.1 System fetched the expense list for the period chosen by the user
			3.2 System displays the expense list in the main window
			Same steps as in the main flow.
	Post-conditions: The list of all the expenses displayed on the main window for the selected time period. 

Use Case 3: Mark an expense as paid or not paid		
	Description: User Mark an expense as paid or not paid
	Actor(s): User
	Goal: User able to Mark an expense as paid or not paid
	Pre-conditions: User already logged in to the system
	Main scenario:
1.	User selects row(s) of expenses from the list of expenses
2.	User selects the ‘Mark expense paid/unpaid’ button
3.	The default ‘unpaid’ status is changed to ‘paid’
4.	The information will be sent and stored in the database
	Alternative scenarios:
                  1. Mark an expense as paid incorrectly
                          1.1 User has to identify the incorrect status.
1.2 User selects the incorrect row(s) of expenses from the list of expenses
1.3 User selects the ‘Mark expense paid/unpaid’ button
1.4 The information will be sent and changed in the database	

Use Case 4: Remove an expense
	Description: User chooses to remove an expense
	Actor(s): User
	Goal: User able to remove an entry in the selected expense list
	Pre-conditions: User already logged in to the system.
	Main scenario:
		1. User selects a row in the list to be removed
		2. User selects the ‘Remove expense’ button
		3. System refreshes the main window with existing expense list
